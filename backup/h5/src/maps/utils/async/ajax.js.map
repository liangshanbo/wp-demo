{"version":3,"sources":["utils/async/ajax.js"],"names":["define","require","exports","module","alert","defaults_xhr","xmlhttp","XMLHttpRequest","defaults","type","dataType","success","error","data","Ajax","window","fetch","_ajax","_fetch","_xhr","params","Object","assign","options","url","alertSecond","df","ops","_url_get","open","setRequestHeader","responseType","onload","status","readyState","res","response","text","code","alertBox","cancelCallback","location","callback","pathname","search","encodeURIComponent","JSON","parse","console","log","ontimeout","stringify","send","args","method","mode","cache","credentials","headers","body","then","ok","json","obj","FormData","append","str","key","substr","length","arr","push","includes","join"],"mappings":"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","file":"../../../js_es6/utils/async/ajax.js","sourcesContent":["/**\r\n * [description] ajax\r\n * 2017-02-08\r\n * query 查询get方法\r\n * post  post\r\n *\r\n * params:  {\r\n    url: \"\", // 必填\r\n    type: \"\", // 选填 [get,post]\r\n    success: function() {}, //选填 成功的回调\r\n    error: function(){}, // 选填 失败的回调\r\n    data: null, // 选填\r\n    dataType: \"\" //选填\r\n}\r\n */\r\ndefine(\"utils/async/ajax\", function(require, exports, module) {\r\n    require('lib/polyfill/object.js');\r\n    require('lib/polyfill/string.js');\r\n    let alert = require('UI/dialog/alert.js');\r\n\r\n    const defaults_xhr = {\r\n        xmlhttp: new XMLHttpRequest(),\r\n        defaults: {\r\n            type: 'post',\r\n            dataType: 'json',\r\n            success: function() {},\r\n            error: function() {},\r\n            data: null\r\n        }\r\n    };\r\n\r\n    class Ajax {\r\n        constructor() {\r\n            if (typeof window.fetch !== \"undefined\") {\r\n                this._ajax = this._fetch;\r\n            } else {\r\n                this._ajax = this._xhr;\r\n            }\r\n        }\r\n        query(params) {\r\n            this._ajax(Object.assign({ type: \"GET\" }, params));\r\n        }\r\n        post(params) {\r\n            this._ajax(Object.assign({ type: \"POST\" }, params));\r\n        }\r\n        put(params) {\r\n            this._ajax(Object.assign({ type: \"PUT\" }, params));\r\n        }\r\n        delete(params) {\r\n            this._ajax(Object.assign({ type: \"DELETE\" }, params));\r\n        }\r\n        _xhr(options) {\r\n            if (!options.url) {\r\n                alert.alertSecond(\"url是必填参数\");\r\n                return;\r\n            }\r\n            let df = defaults_xhr,\r\n                xmlhttp = new XMLHttpRequest(),\r\n                ops = Object.assign({}, df.defaults, options);\r\n\r\n            if (ops.data && ops.type == \"GET\") {\r\n                ops.url = this._url_get(ops.url, ops.data);\r\n            }\r\n            xmlhttp.open(ops.type, ops.url, true);\r\n            xmlhttp.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xmlhttp.responseType = ops.dataType;\r\n            // xmlhttp.timeout = 3000;\r\n            xmlhttp.onload = () => {\r\n                if (xmlhttp.status === 200 && xmlhttp.readyState === 4) {\r\n                    // let res = xmlhttp.response || {};\r\n                    // if (typeof res === 'object' && 'code' in res && res['code'] === 401) {\r\n                    //     alert.alertSecond(res.message);\r\n                    // }\r\n                    var res = xmlhttp.response,\r\n                        text = \"Your login status has expired, please log in again\";\r\n                    if (res.code === 401) {\r\n                        if(res.error.code === \"US-10013\"){\r\n                            text = \"Your account has been logged in elsewhere\";\r\n                        }\r\n                        alert.alertBox({\r\n                            text: text,\r\n                            cancelCallback: function() {\r\n                                location.assign(\"/\");\r\n                            },\r\n                            callback: function() {\r\n                                let url = location.pathname + location.search;\r\n                                location.assign('/login?redirect=' + encodeURIComponent(url));\r\n                            }\r\n                        })\r\n                    }else{\r\n                        res = (typeof res == \"string\") ? JSON.parse(res) : res;\r\n                        ops.success(res);\r\n                    }\r\n                } else {\r\n                    console.log('request is fail');\r\n                }\r\n            }\r\n                xmlhttp.ontimeout = () => {\r\n                console.log('请求超时');\r\n            }\r\n            let data = JSON.stringify(ops.data || {})\r\n            xmlhttp.send(data || null);\r\n        }\r\n        _fetch(options) {\r\n            if (!options.url) {\r\n                alert.alertSecond(\"url是必填参数\");\r\n                return;\r\n            }\r\n            let args = {\r\n                method: options.type,\r\n                mode: 'cors',\r\n                cache: 'default',\r\n                credentials: 'include', // 请求带上cookies，是每次请求保持会话一直\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            };\r\n            if (options.data) {\r\n                if (options.type == \"GET\") {\r\n                    options.url = this._url_get(options.url, options.data);\r\n                } else {\r\n                    args.body = JSON.stringify(options.data || {});\r\n                }\r\n            }\r\n            fetch(options.url, args)\r\n                .then(function(res) {\r\n                    if (res.ok) {\r\n                        //暂时只处理json格式的数据\r\n                        // if (res.headers.get(\"content-type\").indexOf(\"application/json\") >= 0) {\r\n                        res.json().then(function(data) {\r\n                            var text = \"Your login status has expired, please log in again\";\r\n                            if (data.code === 401) {\r\n                                if(data.error.code === \"US-10013\"){\r\n                                    text = \"Your account has been logged in elsewhere\";\r\n                                }\r\n                                alert.alertBox({\r\n                                    text: text,\r\n                                    cancelCallback: function() {\r\n                                        location.assign(\"/\");\r\n                                    },\r\n                                    callback: function() {\r\n                                        let url = location.pathname + location.search;\r\n                                        location.assign('/login?redirect=' + encodeURIComponent(url));\r\n                                    }\r\n                                })\r\n                            }\r\n                            options.success(data);\r\n                        });\r\n                        // } else {\r\n                        // alert.alertSecond(\"暂不支持此格式\");\r\n                        // }\r\n                    }\r\n                });\r\n        }\r\n        _formatParams(obj) {\r\n            // let formdata = new FormData();\r\n            // for (let key in obj) {\r\n            //     formdata.append(key, obj[key]);\r\n            // }\r\n            // return formdata;\r\n            // var arr = new Array();\r\n            // var i = 0;\r\n            // for (var attr in obj) {\r\n            //     arr[i] = encodeURIComponent(attr) + \"=\" + encodeURIComponent(obj[attr]);\r\n            //     i++;\r\n            // }\r\n            // return arr.join(\"&\");\r\n            var data = new FormData();\r\n            data.append(\"json\", JSON.stringify(obj));\r\n            return data;\r\n        }\r\n        _fetchParams(obj) {\r\n            let str = \"\";\r\n            for (let key in obj) {\r\n                str += key + \"=\" + obj[key] + \"&\";\r\n            }\r\n            return str.substr(0, str.length - 1);\r\n        }\r\n        _url_get(url, obj) {\r\n            let arr = [];\r\n            for (let key in obj) {\r\n                arr.push(key + \"=\" + obj[key]);\r\n            }\r\n            url += (url.includes(\"?\") ? \"&\" : \"?\") + arr.join(\"&\");\r\n            return url;\r\n        }\r\n    }\r\n\r\n    module.exports = new Ajax();\r\n});\r\n"]}